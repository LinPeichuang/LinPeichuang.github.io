<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Clin</title>
  
  <subtitle>Clin的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://linpeichuang.github.io/"/>
  <updated>2020-03-12T09:05:11.086Z</updated>
  <id>https://linpeichuang.github.io/</id>
  
  <author>
    <name>Clin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ACM_let1</title>
    <link href="https://linpeichuang.github.io/2020/03/12/ACM-let1/"/>
    <id>https://linpeichuang.github.io/2020/03/12/ACM-let1/</id>
    <published>2020-03-12T08:52:49.000Z</published>
    <updated>2020-03-12T09:05:11.086Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ACM-zoj2812"><a href="#ACM-zoj2812" class="headerlink" title="ACM_zoj2812"></a>ACM_zoj2812</h2><blockquote><p>A checksum is an algorithm that scans a packet of data and returns a single number. The idea is that if the packet is changed, the checksum will also change, so checksums are often used for detecting transmission errors, validating document contents, and in many other situations where it is necessary to detect undesirable changes in data.</p></blockquote><blockquote><p>For this problem, you will implement a checksum algorithm called Quicksum. A Quicksum packet allows only uppercase letters and spaces. It always begins and ends with an uppercase letter. Otherwise, spaces and letters can occur in any combination, including consecutive spaces.</p></blockquote><blockquote><p>A Quicksum is the sum of the products of each character’s position in the packet times the character’s value. A space has a value of zero, while letters have a value equal to their position in the alphabet. So, A=1, B=2, etc., through Z=26. Here are example Quicksum calculations for the packets “ACM” and “MID CENTRAL”:</p></blockquote><blockquote><blockquote><pre><code>ACM: 1*1  + 2*3 + 3*13 = 46</code></pre></blockquote></blockquote><blockquote><p>MID CENTRAL: 1<em>13 + 2</em>9 + 3<em>4 + 4</em>0 + 5<em>3 + 6</em>5 + 7<em>14 + 8</em>20 + 9<em>18 + 10</em>1 + 11*12 = 650<br>Input: The input consists of one or more packets followed by a line containing only # that signals the end of the input. Each packet is on a line by itself, does not begin or end with a space, and contains from 1 to 255 characters.</p></blockquote><p>Output: For each packet, output its Quicksum on a separate line in the output.</p><table><thead><tr><th>Example Input:</th><th>Example Output:</th></tr></thead><tbody><tr><td>ACM</td><td>46</td></tr><tr><td>MID CENTRAL</td><td>650</td></tr><tr><td>REGIONAL PROGRAMMING CONTEST</td><td>4690</td></tr><tr><td>ACN</td><td>49</td></tr><tr><td>A C M</td><td>75</td></tr><tr><td>ABC</td><td>14</td></tr><tr><td>BBC</td><td>15</td></tr></tbody></table><p>代码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span> </span>&#123;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="keyword">int</span> i,sum;</span><br><span class="line"><span class="keyword">while</span>(getline(<span class="built_in">cin</span>,str)&amp;&amp;str!=<span class="string">"#"</span>)&#123;</span><br><span class="line">sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;str.length();i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(str[i]!=<span class="string">' '</span>)&#123;</span><br><span class="line">sum+=(str[i]-<span class="string">'@'</span>)*(i+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ACM-zoj2812&quot;&gt;&lt;a href=&quot;#ACM-zoj2812&quot; class=&quot;headerlink&quot; title=&quot;ACM_zoj2812&quot;&gt;&lt;/a&gt;ACM_zoj2812&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;A checksum is an algo
      
    
    </summary>
    
      <category term="未分类" scheme="https://linpeichuang.github.io/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>linear-16</title>
    <link href="https://linpeichuang.github.io/2019/10/07/linear-16/"/>
    <id>https://linpeichuang.github.io/2019/10/07/linear-16/</id>
    <published>2019-10-07T14:23:14.000Z</published>
    <updated>2019-10-07T14:24:46.055Z</updated>
    
    <content type="html"><![CDATA[<h1 id="7-17-堆栈模拟队列-25-分"><a href="#7-17-堆栈模拟队列-25-分" class="headerlink" title="7-17 堆栈模拟队列 (25 分)"></a>7-17 堆栈模拟队列 (25 分)</h1><p>设已知有两个堆栈S1和S2，请用这两个堆栈模拟出一个队列Q。</p><p>所谓用堆栈模拟队列，实际上就是通过调用堆栈的下列操作函数:</p><p>int IsFull(Stack S)：判断堆栈S是否已满，返回1或0；<br>int IsEmpty (Stack S )：判断堆栈S是否为空，返回1或0；<br>void Push(Stack S, ElementType item )：将元素item压入堆栈S；<br>ElementType Pop(Stack S )：删除并返回S的栈顶元素。<br>实现队列的操作，即入队void AddQ(ElementType item)和出队ElementType DeleteQ()。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h2><p>输入首先给出两个正整数N1和N2，表示堆栈S1和S2的最大容量。随后给出一系列的队列操作：A  item表示将item入列（这里假设item为整型数字）；D表示出队操作；T表示输入结束。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h2><p>对输入中的每个D操作，输出相应出队的数字，或者错误信息ERROR:Empty。如果入队操作无法执行，也需要输出ERROR:Full。每个输出占1行。</p><h1 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h1><p>3 2<br>A 1 A 2 A 3 A 4 A 5 D A 6 D A 7 D A 8 D D D D T</p><h1 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h1><p>ERROR:Full<br>1<br>ERROR:Full<br>2<br>3<br>4<br>7<br>8<br>ERROR:Empty</p><p>###代码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n1, n2,num,i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> s1;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n1 &gt;&gt; n2;</span><br><span class="line"><span class="keyword">int</span> max = n1, min = n2;</span><br><span class="line"><span class="keyword">if</span> (n1 &lt; n2) &#123;</span><br><span class="line">max = n2;</span><br><span class="line">min = n1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;list1(min);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;list2(max);</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s1;</span><br><span class="line"><span class="keyword">if</span> (s1 == <span class="string">'T'</span>)<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (s1 == <span class="string">'A'</span>) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; num;</span><br><span class="line"><span class="keyword">if</span> (i &lt; min) &#123;</span><br><span class="line">list1[i] = num;</span><br><span class="line">++i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"ERROR:Full"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(!j)<span class="built_in">cout</span> &lt;&lt; <span class="string">"ERROR:Empty"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; list2[j--] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i == min &amp;&amp; j == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">while</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">list2[++j] = list1[--i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;7-17-堆栈模拟队列-25-分&quot;&gt;&lt;a href=&quot;#7-17-堆栈模拟队列-25-分&quot; class=&quot;headerlink&quot; title=&quot;7-17 堆栈模拟队列 (25 分)&quot;&gt;&lt;/a&gt;7-17 堆栈模拟队列 (25 分)&lt;/h1&gt;&lt;p&gt;设已知有两个堆栈S1
      
    
    </summary>
    
      <category term="未分类" scheme="https://linpeichuang.github.io/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>linear-15</title>
    <link href="https://linpeichuang.github.io/2019/10/07/linear-15/"/>
    <id>https://linpeichuang.github.io/2019/10/07/linear-15/</id>
    <published>2019-10-07T14:20:25.000Z</published>
    <updated>2019-10-07T14:23:00.045Z</updated>
    
    <content type="html"><![CDATA[<h1 id="7-15-求前缀表达式的值-25-分"><a href="#7-15-求前缀表达式的值-25-分" class="headerlink" title="7-15 求前缀表达式的值 (25 分)"></a>7-15 求前缀表达式的值 (25 分)</h1><p>算术表达式有前缀表示法、中缀表示法和后缀表示法等形式。前缀表达式指二元运算符位于两个运算数之前，例如2+3<em>(7-4)+8/4的前缀表达式是：+ + 2 </em> 3 - 7 4 / 8 4。请设计程序计算前缀表达式的结果值。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h2><p>输入在一行内给出不超过30个字符的前缀表达式，只包含+、-、*、/以及运算数，不同对象（运算数、运算符号）之间以空格分隔。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h2><p>输出前缀表达式的运算结果，保留小数点后1位，或错误信息ERROR。</p><h2 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h2><ul><li><ul><li>2 * 3 - 7 4 / 8 4<h2 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h2>13.0</li></ul></li></ul><p>###代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">double</span>&gt;list1;</span><br><span class="line"><span class="keyword">double</span> s1, s2;</span><br><span class="line"><span class="keyword">int</span> ten;</span><br><span class="line"><span class="keyword">double</span> sum = <span class="number">0</span>;</span><br><span class="line">getline(<span class="built_in">cin</span>, str);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = str.length()<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="keyword">if</span> (str[i] == <span class="string">' '</span>)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (str[i] &gt;= <span class="string">'0'</span> &amp;&amp; str[i] &lt;= <span class="string">'9'</span>) &#123;</span><br><span class="line">ten = <span class="number">10</span>;</span><br><span class="line">sum = str[i] - <span class="number">48</span>;</span><br><span class="line"><span class="keyword">for</span> (--i; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="keyword">if</span> ((str[i] &gt;= <span class="string">'0'</span> &amp;&amp; str[i] &lt;= <span class="string">'9'</span>) || str[i] == <span class="string">'.'</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (str[i] &gt;= <span class="string">'0'</span> &amp;&amp; str[i] &lt;= <span class="string">'9'</span>) &#123;</span><br><span class="line">sum += (str[i] - <span class="number">48</span>) * ten;</span><br><span class="line">ten *= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">sum /= ten;</span><br><span class="line">ten = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (str[i] == <span class="string">'-'</span>) &#123;</span><br><span class="line">sum = -sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">list1.push(sum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">s1 = list1.top();</span><br><span class="line">list1.pop();</span><br><span class="line">s2 = list1.top();</span><br><span class="line">list1.pop();</span><br><span class="line"><span class="keyword">switch</span> (str[i]) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'+'</span>:</span><br><span class="line">sum = s1 + s2;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">sum = s1 - s2;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'*'</span>:</span><br><span class="line">sum = s1 * s2;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'/'</span>:</span><br><span class="line"><span class="keyword">if</span> (s2 == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"ERROR"</span>;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">sum = s1 / s2;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">list1.push(sum);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>.setf(ios::fixed);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">1</span>) &lt;&lt; sum;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;7-15-求前缀表达式的值-25-分&quot;&gt;&lt;a href=&quot;#7-15-求前缀表达式的值-25-分&quot; class=&quot;headerlink&quot; title=&quot;7-15 求前缀表达式的值 (25 分)&quot;&gt;&lt;/a&gt;7-15 求前缀表达式的值 (25 分)&lt;/h1&gt;&lt;p&gt;算术
      
    
    </summary>
    
      <category term="未分类" scheme="https://linpeichuang.github.io/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>linear-14</title>
    <link href="https://linpeichuang.github.io/2019/10/07/linear-14/"/>
    <id>https://linpeichuang.github.io/2019/10/07/linear-14/</id>
    <published>2019-10-07T14:16:42.000Z</published>
    <updated>2019-10-07T14:17:58.576Z</updated>
    
    <content type="html"><![CDATA[<h1 id="7-14-表达式转换-25-分"><a href="#7-14-表达式转换-25-分" class="headerlink" title="7-14 表达式转换 (25 分)"></a>7-14 表达式转换 (25 分)</h1><p>算术表达式有前缀表示法、中缀表示法和后缀表示法等形式。日常使用的算术表达式是采用中缀表示法，即二元运算符位于两个运算数中间。请设计程序将中缀表达式转换为后缀表达式。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h2><p>输入在一行中给出不含空格的中缀表达式，可包含+、-、*、\以及左右括号()，表达式不超过20个字符。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h2><p>在一行中输出转换后的后缀表达式，要求不同对象（运算数、运算符号）之间以空格分隔，但结尾不得有多余空格。</p><h2 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h2><p>2+3*(7-4)+8/4</p><h2 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h2><p>2 3 7 4 - * + 8 4 / +</p><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt;mapping;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; <span class="built_in">list</span>;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="keyword">bool</span> isfirst = <span class="literal">true</span>;</span><br><span class="line">mapping[<span class="string">'-'</span>] = <span class="number">1</span>, mapping[<span class="string">'+'</span>] = <span class="number">1</span>;</span><br><span class="line">mapping[<span class="string">'*'</span>] = <span class="number">2</span>, mapping[<span class="string">'/'</span>] = <span class="number">2</span>;</span><br><span class="line">mapping[<span class="string">'('</span>] = <span class="number">3</span>, mapping[<span class="string">')'</span>] = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.size(); i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (((i == <span class="number">0</span> || str[i - <span class="number">1</span>] == <span class="string">'('</span>) &amp;&amp; (str[i] == <span class="string">'+'</span> || str[i] == <span class="string">'-'</span>)) || (str[i] &gt;= <span class="string">'0'</span> &amp;&amp; str[i] &lt;= <span class="string">'9'</span>) || (str[i] == <span class="string">'.'</span>)) &#123;</span><br><span class="line"><span class="keyword">if</span> (!isfirst) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (str[i] != <span class="string">'+'</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; str[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (str[i + <span class="number">1</span>] == <span class="string">'.'</span> || (str[i + <span class="number">1</span>] &gt;= <span class="string">'0'</span> &amp;&amp; str[i + <span class="number">1</span>] &lt;= <span class="string">'9'</span>)) &#123;</span><br><span class="line">i++;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; str[i];</span><br><span class="line">&#125;</span><br><span class="line">isfirst = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (str[i] == <span class="string">')'</span>) &#123;</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">list</span>.empty() &amp;&amp; <span class="built_in">list</span>.top() != <span class="string">'('</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; <span class="built_in">list</span>.top();</span><br><span class="line"><span class="built_in">list</span>.pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">list</span>.pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">list</span>.empty() || mapping[str[i]] &gt; mapping[<span class="built_in">list</span>.top()]) &#123;</span><br><span class="line"><span class="built_in">list</span>.push(str[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">list</span>.empty() &amp;&amp; <span class="built_in">list</span>.top() != <span class="string">'('</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; <span class="built_in">list</span>.top();</span><br><span class="line"><span class="built_in">list</span>.pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">list</span>.push(str[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">list</span>.empty()) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; <span class="built_in">list</span>.top();</span><br><span class="line"><span class="built_in">list</span>.pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;7-14-表达式转换-25-分&quot;&gt;&lt;a href=&quot;#7-14-表达式转换-25-分&quot; class=&quot;headerlink&quot; title=&quot;7-14 表达式转换 (25 分)&quot;&gt;&lt;/a&gt;7-14 表达式转换 (25 分)&lt;/h1&gt;&lt;p&gt;算术表达式有前缀表示法、中缀
      
    
    </summary>
    
      <category term="未分类" scheme="https://linpeichuang.github.io/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>linear-13</title>
    <link href="https://linpeichuang.github.io/2019/10/07/linear-13/"/>
    <id>https://linpeichuang.github.io/2019/10/07/linear-13/</id>
    <published>2019-10-07T14:14:16.000Z</published>
    <updated>2019-10-07T14:15:48.430Z</updated>
    
    <content type="html"><![CDATA[<h1 id="7-14-银行业务队列简单模拟-25-分"><a href="#7-14-银行业务队列简单模拟-25-分" class="headerlink" title="7-14 银行业务队列简单模拟 (25 分)"></a>7-14 银行业务队列简单模拟 (25 分)</h1><p>设某银行有A、B两个业务窗口，且处理业务的速度不一样，其中A窗口处理速度是B窗口的2倍 —— 即当A窗口每处理完2个顾客时，B窗口处理完1个顾客。给定到达银行的顾客序列，请按业务完成的顺序输出顾客序列。假定不考虑顾客先后到达的时间间隔，并且当不同窗口同时处理完2个顾客时，A窗口顾客优先输出。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h2><p>输入为一行正整数，其中第1个数字N(≤1000)为顾客总数，后面跟着N位顾客的编号。编号为奇数的顾客需要到A窗口办理业务，为偶数的顾客则去B窗口。数字间以空格分隔。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h2><p>按业务处理完成的顺序输出顾客的编号。数字间以空格分隔，但最后一个编号后不能有多余的空格。</p><h2 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h2><p>8 2 1 3 9 4 11 13 15</p><h2 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h2><p>1 3 2 9 11 4 13 15</p><p>###代码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> N = <span class="number">0</span>, i = <span class="number">0</span>, time = <span class="number">0</span>, input,odd_1=<span class="number">0</span>,plural_1=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> odd[<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">int</span> plural[<span class="number">1000</span>];</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line"><span class="keyword">for</span> (; i &lt; N; i++) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; input;</span><br><span class="line"><span class="keyword">if</span> (input % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">plural[plural_1]=input;</span><br><span class="line">++plural_1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">odd[odd_1] = input;</span><br><span class="line">++odd_1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">--plural_1;</span><br><span class="line">--odd_1;</span><br><span class="line">i = <span class="number">0</span>;</span><br><span class="line">j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (odd_1&lt;i &amp;&amp; plural_1&lt;j) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (odd_1 &lt; i &amp;&amp; plural_1 &gt;= j) &#123;</span><br><span class="line"><span class="keyword">while</span> (plural_1-j&gt;<span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; plural[j] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">++j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; plural[j];</span><br><span class="line">++j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (odd_1 &gt;= i &amp;&amp; plural_1 &lt; j) &#123;</span><br><span class="line"><span class="keyword">while</span> (odd_1-i &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; odd[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">++i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; odd[i];</span><br><span class="line">++i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (time &lt; <span class="number">2</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; odd[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">++i;</span><br><span class="line">++time;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; plural[j] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">++j;</span><br><span class="line">time = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;7-14-银行业务队列简单模拟-25-分&quot;&gt;&lt;a href=&quot;#7-14-银行业务队列简单模拟-25-分&quot; class=&quot;headerlink&quot; title=&quot;7-14 银行业务队列简单模拟 (25 分)&quot;&gt;&lt;/a&gt;7-14 银行业务队列简单模拟 (25 分)&lt;/
      
    
    </summary>
    
      <category term="未分类" scheme="https://linpeichuang.github.io/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>linear-12</title>
    <link href="https://linpeichuang.github.io/2019/10/07/linear-12/"/>
    <id>https://linpeichuang.github.io/2019/10/07/linear-12/</id>
    <published>2019-10-07T14:12:07.000Z</published>
    <updated>2019-10-07T14:13:39.788Z</updated>
    
    <content type="html"><![CDATA[<h1 id="7-12-一元多项式的乘法与加法运算-20-分"><a href="#7-12-一元多项式的乘法与加法运算-20-分" class="headerlink" title="7-12 一元多项式的乘法与加法运算 (20 分)"></a>7-12 一元多项式的乘法与加法运算 (20 分)</h1><p>设计函数分别求两个一元多项式的乘积与和。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h2><p>输入分2行，每行分别先给出多项式非零项的个数，再以指数递降方式输入一个多项式非零项系数和指数（绝对值均为不超过1000的整数）。数字间以空格分隔。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h2><p>输出分2行，分别以指数递降方式输出乘积多项式以及和多项式非零项的系数和指数。数字间以空格分隔，但结尾不能有多余空格。零多项式应输出0 0。</p><h2 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h2><p>4 3 4 -5 2  6 1  -2 0<br>3 5 20  -7 4  3 1</p><h2 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h2><p>15 24 -25 22 30 21 -10 20 -21 8 35 6 -33 5 14 4 -15 3 18 2 -6 1<br>5 20 -4 4 -5 2 9 1 -2 0</p><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> total1 = <span class="number">0</span>, total2 = <span class="number">0</span>, i = <span class="number">0</span>, j = <span class="number">0</span>, index1 = <span class="number">0</span>,index2=<span class="number">0</span>,len=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; total1;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;list1(total1*<span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; total1*<span class="number">2</span>; i++) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; list1[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; total2;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;list2(total2*<span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; total2*<span class="number">2</span>; i++) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; list2[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (total1 == <span class="number">0</span>&amp;&amp;total2!=<span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; <span class="number">0</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; list2.size()<span class="number">-2</span>; i = i + <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (list2[i] != <span class="number">0</span>)<span class="built_in">cout</span> &lt;&lt; list2[i] &lt;&lt; <span class="string">" "</span>&lt;&lt;list2[i + <span class="number">1</span>] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; list2[i] &lt;&lt; <span class="string">" "</span>&lt;&lt;list2[i + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (total2 == <span class="number">0</span>&amp;&amp;total1!=<span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; <span class="number">0</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; list2.size() - <span class="number">2</span>; i = i + <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (list1[i] != <span class="number">0</span>)<span class="built_in">cout</span> &lt;&lt; list1[i] &lt;&lt; <span class="string">" "</span> &lt;&lt; list1[i + <span class="number">1</span>] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; list1[i] &lt;&lt; <span class="string">" "</span> &lt;&lt; list1[i + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (total2 == <span class="number">0</span> &amp;&amp; total1 != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (list1[<span class="number">1</span>] &gt; list2[<span class="number">1</span>])len = list1[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">else</span> len = list2[<span class="number">1</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;list3(len + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;list4(list1[<span class="number">1</span>] + list2[<span class="number">1</span>] + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; list1.size(); i = i + <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt; list2.size(); j = j + <span class="number">2</span>) &#123;</span><br><span class="line">list4[list1[i] + list2[j]] += list1[i - <span class="number">1</span>] * list2[j - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">list3[list1[i]] += list1[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt; list2.size(); j = j + <span class="number">2</span>) &#123;</span><br><span class="line">list3[list2[j]] += list2[j - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = list4.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="keyword">if</span> (!list4[i]) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; list4[i] &lt;&lt; <span class="string">" "</span> &lt;&lt; i;</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; list4[i] &lt;&lt; <span class="string">" "</span> &lt;&lt; i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = list3.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="keyword">if</span> (!list3[i]) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; list3[i] &lt;&lt; <span class="string">" "</span> &lt;&lt; i;</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; list3[i] &lt;&lt; <span class="string">" "</span> &lt;&lt; i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;7-12-一元多项式的乘法与加法运算-20-分&quot;&gt;&lt;a href=&quot;#7-12-一元多项式的乘法与加法运算-20-分&quot; class=&quot;headerlink&quot; title=&quot;7-12 一元多项式的乘法与加法运算 (20 分)&quot;&gt;&lt;/a&gt;7-12 一元多项式的乘法与加
      
    
    </summary>
    
      <category term="未分类" scheme="https://linpeichuang.github.io/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>linear-11</title>
    <link href="https://linpeichuang.github.io/2019/10/07/linear-11/"/>
    <id>https://linpeichuang.github.io/2019/10/07/linear-11/</id>
    <published>2019-10-07T14:09:34.000Z</published>
    <updated>2019-10-07T14:10:43.171Z</updated>
    
    <content type="html"><![CDATA[<h1 id="7-11-栈-20-分"><a href="#7-11-栈-20-分" class="headerlink" title="7-11 栈 (20 分)"></a>7-11 栈 (20 分)</h1><p>我们知道平凡的栈有几个操作:</p><p>push(value) 将 value 压入栈<br>pop() 将栈顶元素弹出, 并返回这个弹出的元素。</p><p>现在我们想要在平凡栈的基础上实现以下几个操作:<br>push(val) 将 val 压入栈；<br>pop() 将栈顶元素弹出；<br>min() 返回栈中元素的最小值。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h2><p>第一行输入一个N( 0=&lt;N&lt;=1000000),代表有N行操作。 接下来N行每行有一个操作,题目保证操作不会越界.</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h2><p>输出每次查询min()时的结果,pop()不用输出</p><h2 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h2><p>6<br>push 1<br>min<br>push 2<br>min<br>push 3<br>min</p><h2 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h2><p>1<br>1<br>1</p><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> N = <span class="number">0</span>, len = <span class="number">0</span>, all = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> s1[<span class="number">5</span>];</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;list2(N/<span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s1;</span><br><span class="line"><span class="keyword">switch</span> (s1[<span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'u'</span>:</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; i;</span><br><span class="line"><span class="keyword">if</span> (len == <span class="number">0</span>) &#123;</span><br><span class="line">list2[<span class="number">0</span>] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (i &lt; list2[len - <span class="number">1</span>]) &#123;</span><br><span class="line">list2[len] = i;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">list2[len] = list2[len<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">++len;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'i'</span>:</span><br><span class="line"><span class="keyword">if</span> (len == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; list2[<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; list2[len - <span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'o'</span>:</span><br><span class="line">list2[len<span class="number">-1</span>] = <span class="number">0</span>;</span><br><span class="line">--len;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;7-11-栈-20-分&quot;&gt;&lt;a href=&quot;#7-11-栈-20-分&quot; class=&quot;headerlink&quot; title=&quot;7-11 栈 (20 分)&quot;&gt;&lt;/a&gt;7-11 栈 (20 分)&lt;/h1&gt;&lt;p&gt;我们知道平凡的栈有几个操作:&lt;/p&gt;
&lt;p&gt;push(val
      
    
    </summary>
    
      <category term="未分类" scheme="https://linpeichuang.github.io/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>linear-10</title>
    <link href="https://linpeichuang.github.io/2019/10/07/linear-10/"/>
    <id>https://linpeichuang.github.io/2019/10/07/linear-10/</id>
    <published>2019-10-07T13:55:31.000Z</published>
    <updated>2019-10-07T13:57:38.189Z</updated>
    
    <content type="html"><![CDATA[<h1 id="7-10-迷宫寻路-20-分"><a href="#7-10-迷宫寻路-20-分" class="headerlink" title="7-10 迷宫寻路 (20 分)"></a>7-10 迷宫寻路 (20 分)</h1><p>给定一个M行N列的迷宫图，其中 “0”表示可通路，”1”表示障碍物，无法通行。在迷宫中只允许在水平或上下四个方向的通路上行走，走过的位置不能重复走。</p><p>5行8列的迷宫如下：</p><p>0 1 1 1 0 0 0 0<br>0 0 0 1 0 0 0 0<br>0 1 0 0 0 1 0 0<br>0 1 1 1 0 1 1 0<br>1 0 0 0 0 0 0 0<br>则从左上角（1，1）至右下角（5，8）的最短路径为：</p><p>1,1–》2,1–》2,2–》2,3–》3,3–》3,4–》3,5–》4,5–》5,5–》5,6–》5,7–》5,8</p><p>题目保证每个迷宫最多只有一条最短路径。</p><p>请输出该条最短路径，如果不存在任何通路，则输出”NO FOUND”.</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h2><p>第一行，输入M和N值，表示迷宫行数和列数。</p><p>接着输入M行数值，其中，0表示通路，1表示障碍物。每列数值用空格符间隔。</p><p>接下来可能输入多组迷宫数据。</p><p>当输入M的值为-1时结束输入。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h2><p>按行顺序输出路径的每个位置的行数和列数，如 x,y</p><p>如果不存在任何路径，则输出”NO FOUND”.</p><p>每组迷宫寻路结果用换行符间隔。</p><h2 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h2><p>在这里给出一组迷宫。例如：</p><p>8 8<br>0 0 1 0 0 0 1 0<br>0 0 1 0 0 0 1 0<br>0 0 0 0 1 1 0 0<br>0 1 1 1 0 0 0 0<br>0 0 0 1 0 0 0 0<br>0 1 0 0 0 1 0 0<br>0 1 1 1 0 1 1 0<br>1 0 0 0 0 0 0 0<br>4 4<br>0 0 1 0<br>0 0 0 0<br>0 0 1 1<br>0 1 0 0<br>-1 -1</p><h2 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h2><p>在这里给出相应的输出。例如：</p><p>1,1<br>2,1<br>3,1<br>4,1<br>5,1<br>5,2<br>5,3<br>6,3<br>6,4<br>6,5<br>7,5<br>8,5<br>8,6<br>8,7<br>8,8</p><p>NO FOUND</p><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;7-10-迷宫寻路-20-分&quot;&gt;&lt;a href=&quot;#7-10-迷宫寻路-20-分&quot; class=&quot;headerlink&quot; title=&quot;7-10 迷宫寻路 (20 分)&quot;&gt;&lt;/a&gt;7-10 迷宫寻路 (20 分)&lt;/h1&gt;&lt;p&gt;给定一个M行N列的迷宫图，其中 “0
      
    
    </summary>
    
      <category term="未分类" scheme="https://linpeichuang.github.io/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>linear-9</title>
    <link href="https://linpeichuang.github.io/2019/10/07/linear-9/"/>
    <id>https://linpeichuang.github.io/2019/10/07/linear-9/</id>
    <published>2019-10-07T13:47:11.000Z</published>
    <updated>2019-10-07T13:54:15.203Z</updated>
    
    <content type="html"><![CDATA[<h1 id="7-9-括号匹配-18-分"><a href="#7-9-括号匹配-18-分" class="headerlink" title="7-9 括号匹配 (18 分)"></a>7-9 括号匹配 (18 分)</h1><p>检查一段C语言代码的小括号( )、 中括号 [ ] 和大括号{ } 是否匹配。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h2><p>在一行中输入一段C语言代码，长度不超过1000个字符（行末以换行符结束）。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h2><p>第一行输出左括号的数量和右括号的数量，中间以一个空格间隔。<br>若括号是匹配的，在第二行打印YES，否则打印NO。</p><h2 id="输入样例1"><a href="#输入样例1" class="headerlink" title="输入样例1:"></a>输入样例1:</h2><p>for(int i=0; i&lt;v; i++){ visited[i] = 0; for(int j=0; j&lt;v; j++) scanf(“%d”,&amp;(g-&gt;Adj[i][j])); }<br>输出样例1:<br>8 8<br>YES</p><h2 id="输入样例2"><a href="#输入样例2" class="headerlink" title="输入样例2:"></a>输入样例2:</h2><p>for(int i=0; i&lt;v; i++) a(i]=0;</p><h2 id="输出样例2"><a href="#输出样例2" class="headerlink" title="输出样例2:"></a>输出样例2:</h2><p>2 2<br>NO</p><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="keyword">bool</span> fal = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; mystack;</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>,num1=<span class="number">0</span>,num2=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i&lt;<span class="number">1000</span>) &#123;</span><br><span class="line"><span class="built_in">cin</span>.get(c);</span><br><span class="line"><span class="keyword">if</span> (c == <span class="string">'\n'</span>)<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span> (c == <span class="string">'&#123;'</span> || c == <span class="string">'['</span> || c == <span class="string">'('</span>)num1++;</span><br><span class="line"><span class="keyword">if</span> (c == <span class="string">'&#125;'</span> || c == <span class="string">']'</span> || c == <span class="string">')'</span>)num2++;</span><br><span class="line"><span class="keyword">if</span> (fal) &#123;</span><br><span class="line"><span class="keyword">if</span> (c == <span class="string">'&#123;'</span> || c == <span class="string">'['</span> || c == <span class="string">'('</span>)mystack.push(c);</span><br><span class="line"><span class="keyword">if</span> (!mystack.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (c == <span class="string">')'</span> &amp;&amp; num1 != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (mystack.top() != <span class="string">'('</span>)</span><br><span class="line">&#123;</span><br><span class="line">fal = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">mystack.pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">']'</span> &amp;&amp; num1 != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (mystack.top() != <span class="string">'['</span>)</span><br><span class="line">&#123;</span><br><span class="line">fal = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">mystack.pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">'&#125;'</span> &amp;&amp; num1 != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (mystack.top() != <span class="string">'&#123;'</span>)</span><br><span class="line">&#123;</span><br><span class="line">fal = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">mystack.pop();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; num1 &lt;&lt; <span class="string">" "</span> &lt;&lt; num2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">if</span> (!fal||num1!=num2)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;7-9-括号匹配-18-分&quot;&gt;&lt;a href=&quot;#7-9-括号匹配-18-分&quot; class=&quot;headerlink&quot; title=&quot;7-9 括号匹配 (18 分)&quot;&gt;&lt;/a&gt;7-9 括号匹配 (18 分)&lt;/h1&gt;&lt;p&gt;检查一段C语言代码的小括号( )、 中括号 
      
    
    </summary>
    
      <category term="未分类" scheme="https://linpeichuang.github.io/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>linear-8</title>
    <link href="https://linpeichuang.github.io/2019/10/07/linear-8/"/>
    <id>https://linpeichuang.github.io/2019/10/07/linear-8/</id>
    <published>2019-10-07T13:46:56.000Z</published>
    <updated>2019-10-07T13:46:56.495Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="未分类" scheme="https://linpeichuang.github.io/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>linear-7</title>
    <link href="https://linpeichuang.github.io/2019/10/07/linear-7/"/>
    <id>https://linpeichuang.github.io/2019/10/07/linear-7/</id>
    <published>2019-10-07T13:46:42.000Z</published>
    <updated>2019-10-07T13:52:10.307Z</updated>
    
    <content type="html"><![CDATA[<h1 id="7-7-最短连续序列长度-简单穷举-10-分"><a href="#7-7-最短连续序列长度-简单穷举-10-分" class="headerlink" title="7-7 最短连续序列长度-简单穷举 (10 分)"></a>7-7 最短连续序列长度-简单穷举 (10 分)</h1><p>有n个正整数组成的一个序列(a1,a,2, …, aN).对于给定的一个序列(a1, a2, …, aN)，(1,2,3,…N)为这个序列对应元素的序号.ai元素的序号为i.给定一个整数S , 找出一个长度最短的连续序列，使得组成这个序列的各个整数的和不小于S，如果存在多个这样的最短序列 ，则找序号字典序最小的连续序列。比如：序列 9，8，9，6，4； S=3； 那么最短长度显然是1；字典序最小的序列就是第一个元素组成的序列 9 。比如：序列 5 1 3 5 10 7 4 9 2 8； S=15； 那么最短长度显然是2；最短的连续序列5 10 ， 10 7 ， 均满足最短的要求 ，我们要求输出序列序号字典序最小的序列，显然是 5 10 。题目来源自 北大oj题目改编.</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h2><p>输入m组数据。每组数据的第一行为整数n和S(3&lt;n&lt;=1000 000,S&lt;1000 000 000);第2行为n个正整数,均不超过10000.输入结束为文件结束标志(EOF);</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h2><p>对于每组数据,第一行输出满足条件的最短序列的长度，第2行输出元素序号字典序最小的那个序列。如果不存在,2行均输出0.</p><h2 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h2><p>在这里给出一组输入。例如：输入3组数据，第一行就是组数</p><p>3<br>10 15<br>5 1 3 5 10 7 4 9 2 8<br>5 11<br>1 2 3 4 5<br>5 16<br>1 2 3 4 5</p><h2 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h2><p>在这里给出相应的输出。例如：注意序列最后一个数后没有空格字符.否则会导致格式错误.</p><p>2<br>5 10<br>3<br>3 4 5<br>0<br>0</p><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> m = <span class="number">0</span>, n = <span class="number">0</span>, S = <span class="number">0</span>, lengh = <span class="number">0</span>, begin = <span class="number">0</span>,j;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line"><span class="keyword">int</span> indec1=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; vec2(m, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line"><span class="keyword">while</span> (indec1&lt;m) &#123;</span><br><span class="line">lengh = <span class="number">0</span>; begin = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; S;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec1(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; vec1[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> j = i;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>; </span><br><span class="line"><span class="keyword">bool</span> no_full = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span> (j &lt; n &amp;&amp; no_full)</span><br><span class="line">&#123;</span><br><span class="line">sum += vec1[j++];</span><br><span class="line"><span class="keyword">if</span> (sum &gt;= S)no_full = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (sum &lt; S)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">lengh = j - i<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (lengh &gt; j - i<span class="number">-1</span>) &#123;</span><br><span class="line">lengh = j - i<span class="number">-1</span>;</span><br><span class="line">begin = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (lengh &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> index;</span><br><span class="line">vec2[indec1].push_back(lengh+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (index = begin; index &lt; begin + lengh+<span class="number">1</span> ; index++)</span><br><span class="line">vec2[indec1].push_back(vec1[index]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">vec2[indec1].push_back(<span class="number">0</span>);</span><br><span class="line">vec2[indec1].push_back(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">indec1++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">lengh= vec2[i].size();</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; lengh<span class="number">-1</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (j == <span class="number">0</span>)<span class="built_in">cout</span> &lt;&lt; vec2[i][<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; vec2[i][j] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; vec2[i][j];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;7-7-最短连续序列长度-简单穷举-10-分&quot;&gt;&lt;a href=&quot;#7-7-最短连续序列长度-简单穷举-10-分&quot; class=&quot;headerlink&quot; title=&quot;7-7 最短连续序列长度-简单穷举 (10 分)&quot;&gt;&lt;/a&gt;7-7 最短连续序列长度-简单穷举 
      
    
    </summary>
    
      <category term="未分类" scheme="https://linpeichuang.github.io/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>linear-6</title>
    <link href="https://linpeichuang.github.io/2019/10/07/linear-6/"/>
    <id>https://linpeichuang.github.io/2019/10/07/linear-6/</id>
    <published>2019-10-07T13:46:25.000Z</published>
    <updated>2019-10-07T14:07:28.722Z</updated>
    
    <content type="html"><![CDATA[<h1 id="7-6-【模板】KMP字符串匹配-20-分"><a href="#7-6-【模板】KMP字符串匹配-20-分" class="headerlink" title="7-6 【模板】KMP字符串匹配 (20 分)"></a>7-6 【模板】KMP字符串匹配 (20 分)</h1><p>给出两个字符串text和pattern，其中pattern为text的子串，求出pattern在text中所有出现的位置。</p><p>为了减少骗分的情况，接下来还要输出子串的前缀数组next。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h2><p>第一行为一个字符串，即为text。</p><p>第二行为一个字符串，即为pattern。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h2><p>若干行，每行包含一个整数，表示pattern在text中出现的位置。</p><p>接下来1行，包括length(pattern)个整数，表示前缀数组next[i]的值，数据间以一个空格分隔，行尾无多余空格。</p><h2 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h2><p>ABABABC<br>ABA</p><h2 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h2><p>1<br>3<br>0 0 1</p><h2 id="样例说明"><a href="#样例说明" class="headerlink" title="样例说明:"></a>样例说明:</h2><p>!(<a href="https://images.ptausercontent.com/05ffd584-7ab1-46eb-b717-79b180eac834.jpg" target="_blank" rel="noopener">https://images.ptausercontent.com/05ffd584-7ab1-46eb-b717-79b180eac834.jpg</a>)</p><p>###代码：</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;7-6-【模板】KMP字符串匹配-20-分&quot;&gt;&lt;a href=&quot;#7-6-【模板】KMP字符串匹配-20-分&quot; class=&quot;headerlink&quot; title=&quot;7-6 【模板】KMP字符串匹配 (20 分)&quot;&gt;&lt;/a&gt;7-6 【模板】KMP字符串匹配 (20 
      
    
    </summary>
    
      <category term="未分类" scheme="https://linpeichuang.github.io/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>linear-5</title>
    <link href="https://linpeichuang.github.io/2019/10/07/linear-5/"/>
    <id>https://linpeichuang.github.io/2019/10/07/linear-5/</id>
    <published>2019-10-07T13:46:07.000Z</published>
    <updated>2019-10-07T14:03:18.078Z</updated>
    
    <content type="html"><![CDATA[<h1 id="7-5-稀疏矩阵加法-20-分"><a href="#7-5-稀疏矩阵加法-20-分" class="headerlink" title="7-5 稀疏矩阵加法 (20 分)"></a>7-5 稀疏矩阵加法 (20 分)</h1><p>给定两个矩阵A和B，求其和矩阵C=A+B。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h2><p>第一行包含两个数Row和Col，分别表示矩阵的行数和列数，A和B的维度是一致的。</p><p>第二行只有一个数N1，表示接下来要输入的A中的非零元素的个数。</p><p>接下来是N1 行，每一行都是i j A[i,j] 这样的形式，表示的A中第i行第j列的元素A[i,j]，为了与大多数编程语言保持一致，它们都是从零开始的，也就是说下标的有效范围是[0,Row−1]×[0,Col−1]。</p><p>在N​1行之后，是一个数N2，表示矩阵B中非零元素的数量，此后N2行描述B中的非零元素，它们与此前描述A中非零元素的形式一致。</p><p>矩阵元素的输入均遵循行主序。这里的所有的输入均可用int类型正确表示，可以假设输入均是合法的。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h2><p>第一行输出和矩阵C=A+B中的绝对值大于0.1的元素个数N3，此后是N3行，按照行主序输出其中的非零元素，依次是行、列的下标和对应的元素。</p><h2 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h2><p>2 2<br>1<br>1 1 1<br>1<br>0 0 1</p><h2 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h2><p>2<br>0 0 1<br>1 1 1</p><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;7-5-稀疏矩阵加法-20-分&quot;&gt;&lt;a href=&quot;#7-5-稀疏矩阵加法-20-分&quot; class=&quot;headerlink&quot; title=&quot;7-5 稀疏矩阵加法 (20 分)&quot;&gt;&lt;/a&gt;7-5 稀疏矩阵加法 (20 分)&lt;/h1&gt;&lt;p&gt;给定两个矩阵A和B，求其和矩
      
    
    </summary>
    
      <category term="未分类" scheme="https://linpeichuang.github.io/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>linear-4</title>
    <link href="https://linpeichuang.github.io/2019/10/07/linear-4/"/>
    <id>https://linpeichuang.github.io/2019/10/07/linear-4/</id>
    <published>2019-10-07T13:45:48.000Z</published>
    <updated>2019-10-07T14:00:23.689Z</updated>
    
    <content type="html"><![CDATA[<h1 id="7-4-Tuple-25-分"><a href="#7-4-Tuple-25-分" class="headerlink" title="7-4 Tuple (25 分)"></a>7-4 Tuple (25 分)</h1><p>In Python language, tuple (immutable sequence) is a useful utility, typically used to store all kinds of data, including tuples. The elements in a tuple are separated by a comma, and the tuple can be empty. You can access elements in a tuple by their indices, which are numbered from 0 to M−1 where M is size of the tuple. For the Python code shown below,</p><p>m = (1, 2, (3, 4, (5, 6)), 7, (8, 9), ())<br>n = m[1]<br>s = m[2][1]<br>t = m[2][2][1]<br>u = m[4]<br>the values of n, s, t and u are 2, 4, 6 and (8, 9), respectively.</p><p>Now for your convenience, it is assumed that each element in the tuple is either a positive integer (&lt;=100) or a tuple. Given some groups of indices, for each group you are supposed to get corresponding elements.</p><h2 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h2><p>Each test file contains one test case. The first line of each test case contains a string representing the given tuple, like</p><p>( 1 2 ( 3 4 ( 5 6 ) ) 7 ( 8 9 ) ( ) ).</p><p>Please notice:</p><p>all items in the tuple are displayed inside a pair of parentheses ( );<br>all items in the tuple and right parentheses are displayed with a leading space.<br>The second line contains an integer N (&lt;=100, the number of queries). And then N lines each gives information in the format</p><p>K S<br>​1<br>​​  S<br>​2<br>​​  … S<br>​k<br>​​  ,</p><p>where K is the number of given indices, followed by K integers S<br>​1<br>​​  to S<br>​k<br>​​ . It is guaranteed that all given tuples are valid, and that the total count of integers in the tuple will not exceed 100.</p><h2 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h2><p>For each query, print in a line the corresponding element. If the element is still a tuple, you must print it in the same format as input. And if it cannot be accessed by the given indices, just print ERROR. No extra spaces are allowed at the end of line.</p><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h2><p>( 1 2 ( 3 4 ( 5 6 7 ) 8 ) 9 10 )<br>6<br>1 1<br>2 2 1<br>3 2 2 2<br>2 2 2<br>2 1 0<br>3 2 2 3</p><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h2><p>2<br>4<br>7<br>( 5 6 7 )<br>ERROR<br>ERROR</p><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;7-4-Tuple-25-分&quot;&gt;&lt;a href=&quot;#7-4-Tuple-25-分&quot; class=&quot;headerlink&quot; title=&quot;7-4 Tuple (25 分)&quot;&gt;&lt;/a&gt;7-4 Tuple (25 分)&lt;/h1&gt;&lt;p&gt;In Python language
      
    
    </summary>
    
      <category term="未分类" scheme="https://linpeichuang.github.io/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>linear-3</title>
    <link href="https://linpeichuang.github.io/2019/10/07/linear-3/"/>
    <id>https://linpeichuang.github.io/2019/10/07/linear-3/</id>
    <published>2019-10-07T13:45:21.000Z</published>
    <updated>2019-10-07T13:58:54.077Z</updated>
    
    <content type="html"><![CDATA[<h1 id="7-3-Table-Tennis-30-分"><a href="#7-3-Table-Tennis-30-分" class="headerlink" title="7-3 Table Tennis (30 分)"></a>7-3 Table Tennis (30 分)</h1><p>A table tennis club has N tables available to the public. The tables are numbered from 1 to N. For any pair of players, if there are some tables open when they arrive, they will be assigned to the available table with the smallest number. If all the tables are occupied, they will have to wait in a queue. It is assumed that every pair of players can play for at most 2 hours.</p><p>Your job is to count for everyone in queue their waiting time, and for each table the number of players it has served for the day.</p><p>One thing that makes this procedure a bit complicated is that the club reserves some tables for their VIP members. When a VIP table is open, the first VIP pair in the queue will have the priviledge to take it. However, if there is no VIP in the queue, the next pair of players can take it. On the other hand, if when it is the turn of a VIP pair, yet no VIP table is available, they can be assigned as any ordinary players.</p><h2 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h2><p>Each input file contains one test case. For each case, the first line contains an integer N (≤10000) - the total number of pairs of players. Then N lines follow, each contains 2 times and a VIP tag: HH:MM:SS - the arriving time, P - the playing time in minutes of a pair of players, and tag - which is 1 if they hold a VIP card, or 0 if not. It is guaranteed that the arriving time is between 08:00:00 and 21:00:00 while the club is open. It is assumed that no two customers arrives at the same time. Following the players’ info, there are 2 positive integers: K (≤100) - the number of tables, and M (&lt; K) - the number of VIP tables. The last line contains M table numbers.</p><h2 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h2><p>For each test case, first print the arriving time, serving time and the waiting time for each pair of players in the format shown by the sample. Then print in a line the number of players served by each table. Notice that the output must be listed in chronological order of the serving time. The waiting time must be rounded up to an integer minute(s). If one cannot get a table before the closing time, their information must NOT be printed.</p><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h2><p>9<br>20:52:00 10 0<br>08:00:00 20 0<br>08:02:00 30 0<br>20:51:00 10 0<br>08:10:00 5 0<br>08:12:00 10 1<br>20:50:00 10 0<br>08:01:30 15 1<br>20:53:00 10 1<br>3 1<br>2</p><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h2><p>08:00:00 08:00:00 0<br>08:01:30 08:01:30 0<br>08:02:00 08:02:00 0<br>08:12:00 08:16:30 5<br>08:10:00 08:20:00 10<br>20:50:00 20:50:00 0<br>20:51:00 20:51:00 0<br>20:52:00 20:52:00 0<br>3 3 2</p><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;7-3-Table-Tennis-30-分&quot;&gt;&lt;a href=&quot;#7-3-Table-Tennis-30-分&quot; class=&quot;headerlink&quot; title=&quot;7-3 Table Tennis (30 分)&quot;&gt;&lt;/a&gt;7-3 Table Tennis (30 
      
    
    </summary>
    
      <category term="未分类" scheme="https://linpeichuang.github.io/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>linear-2</title>
    <link href="https://linpeichuang.github.io/2019/10/07/linear-2/"/>
    <id>https://linpeichuang.github.io/2019/10/07/linear-2/</id>
    <published>2019-10-07T13:29:53.000Z</published>
    <updated>2019-10-07T13:41:36.177Z</updated>
    
    <content type="html"><![CDATA[<h1 id="7-2-Pop-Sequence"><a href="#7-2-Pop-Sequence" class="headerlink" title="7-2 Pop Sequence"></a>7-2 Pop Sequence</h1><p>Given a stack which can keep M numbers at most. Push N numbers in the order of 1, 2, 3, …, N and pop randomly. You are supposed to tell if a given sequence of numbers is a possible pop sequence of the stack. For example, if M is 5 and N is 7, we can obtain 1, 2, 3, 4, 5, 6, 7 from the stack, but not 3, 2, 1, 7, 5, 6, 4.</p><h2 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h2><p>Each input file contains one test case. For each case, the first line contains 3 numbers (all no more than 1000): M (the maximum capacity of the stack), N (the length of push sequence), and K (the number of pop sequences to be checked). Then K lines follow, each contains a pop sequence of N numbers. All the numbers in a line are separated by a space.</p><h2 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h2><p>For each pop sequence, print in one line “YES” if it is indeed a possible pop sequence of the stack, or “NO” if not.</p><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h2><p>5 7 5<br>1 2 3 4 5 6 7<br>3 2 1 7 5 6 4<br>7 6 5 4 3 2 1<br>5 6 4 3 7 2 1<br>1 7 6 5 4 3 2</p><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h2><p>YES<br>NO<br>NO<br>YES<br>NO</p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m=<span class="number">0</span>,n=<span class="number">0</span>,k=<span class="number">0</span>,i=<span class="number">0</span>,j=<span class="number">0</span>,flag=<span class="number">0</span>,num=<span class="number">0</span>,len=<span class="number">0</span>,index=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">bool</span> fal;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n&gt;&gt;k;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt;<span class="built_in">list</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;k;i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(!<span class="built_in">list</span>.empty())<span class="built_in">list</span>.pop();</span><br><span class="line">        fal=<span class="literal">true</span>;</span><br><span class="line">        len=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;num;</span><br><span class="line">                <span class="keyword">while</span> (fal)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(<span class="built_in">list</span>.empty()||<span class="built_in">list</span>.top()!=num)&#123;</span><br><span class="line">                    <span class="built_in">list</span>.push(len);</span><br><span class="line">                    <span class="keyword">if</span>(<span class="built_in">list</span>.size()&gt;m)&#123;</span><br><span class="line">                        fal=<span class="literal">false</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    len++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">list</span>.empty()&amp;&amp;<span class="built_in">list</span>.top()==num)&#123;</span><br><span class="line">                        <span class="built_in">list</span>.pop();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(fal&amp;&amp;<span class="built_in">list</span>.empty())<span class="built_in">cout</span>&lt;&lt;<span class="string">"YES"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">"NO"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;7-2-Pop-Sequence&quot;&gt;&lt;a href=&quot;#7-2-Pop-Sequence&quot; class=&quot;headerlink&quot; title=&quot;7-2 Pop Sequence&quot;&gt;&lt;/a&gt;7-2 Pop Sequence&lt;/h1&gt;&lt;p&gt;Given a stack 
      
    
    </summary>
    
      <category term="未分类" scheme="https://linpeichuang.github.io/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>PTA1</title>
    <link href="https://linpeichuang.github.io/2019/10/07/PTA1/"/>
    <id>https://linpeichuang.github.io/2019/10/07/PTA1/</id>
    <published>2019-10-07T13:13:17.000Z</published>
    <updated>2019-10-07T13:18:48.181Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PTA线性结构-1"><a href="#PTA线性结构-1" class="headerlink" title="PTA线性结构-1"></a>PTA线性结构-1</h1><p>Given a constant K and a singly linked list L, you are supposed to reverse the links of every K elements on L. For example, given L being 1→2→3→4→5→6, if K=3, then you must output 3→2→1→6→5→4; if K=4, you must output 4→3→2→1→5→6.</p><p>Input Specification:<br>Each input file contains one test case. For each case, the first line contains the address of the first node, a positive N (≤10<br>​5<br>​​ ) which is the total number of nodes, and a positive K (≤N) which is the length of the sublist to be reversed. The address of a node is a 5-digit nonnegative integer, and NULL is represented by -1.</p><p>Then N lines follow, each describes a node in the format:</p><p>Address Data Next<br>where Address is the position of the node, Data is an integer, and Next is the position of the next node.</p><p>Output Specification:<br>For each case, output the resulting ordered linked list. Each node occupies a line, and is printed in the same format as in the input.</p><p>Sample Input:<br>00100 6 4<br>00000 4 99999<br>00100 1 12309<br>68237 6 -1<br>33218 3 00000<br>99999 5 68237<br>12309 2 33218<br>Sample Output:<br>00000 4 33218<br>33218 3 12309<br>12309 2 00100<br>00100 1 99999<br>99999 5 68237<br>68237 6 -1</p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> data;</span><br><span class="line"><span class="keyword">int</span> next;</span><br><span class="line">&#125;<span class="built_in">list</span>[<span class="number">100000</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> now, head, N, last, K;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, add, s1 = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; head &gt;&gt; N &gt;&gt; K;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;add_list;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; add;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; <span class="built_in">list</span>[add].data &gt;&gt; <span class="built_in">list</span>[add].next;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">list</span>[add].next == <span class="number">-1</span>) &#123;</span><br><span class="line">last = add;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">now = head; N = <span class="number">0</span>; i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (now != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">add_list.push_back(now);</span><br><span class="line">now = <span class="built_in">list</span>[now].next;</span><br><span class="line">N++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (K != <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> time = N / K;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i = i + K) &#123;</span><br><span class="line"><span class="keyword">if</span> (time==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = K + i - <span class="number">1</span>; j &gt;= i; j--) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; setfill(<span class="string">'0'</span>) &lt;&lt; setw(<span class="number">5</span>) &lt;&lt; add_list[j];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; <span class="built_in">list</span>[add_list[j]].data &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="keyword">if</span> (j != i)<span class="built_in">cout</span> &lt;&lt; setfill(<span class="string">'0'</span>) &lt;&lt; setw(<span class="number">5</span>) &lt;&lt; add_list[j - <span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (time==<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (N % K != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; setfill(<span class="string">'0'</span>) &lt;&lt; setw(<span class="number">5</span>) &lt;&lt; add_list[i + K] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; setfill(<span class="string">'0'</span>) &lt;&lt; setw(<span class="number">5</span>) &lt;&lt; add_list[i+K+K - <span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">--time;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (; i &lt; N; i++) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; setfill(<span class="string">'0'</span>) &lt;&lt; setw(<span class="number">5</span>) &lt;&lt; add_list[i];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; <span class="built_in">list</span>[add_list[i]].data &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="keyword">if</span> (i != N - <span class="number">1</span>)<span class="built_in">cout</span> &lt;&lt; setfill(<span class="string">'0'</span>) &lt;&lt; setw(<span class="number">5</span>) &lt;&lt; add_list[i + <span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;PTA线性结构-1&quot;&gt;&lt;a href=&quot;#PTA线性结构-1&quot; class=&quot;headerlink&quot; title=&quot;PTA线性结构-1&quot;&gt;&lt;/a&gt;PTA线性结构-1&lt;/h1&gt;&lt;p&gt;Given a constant K and a singly linked lis
      
    
    </summary>
    
      <category term="未分类" scheme="https://linpeichuang.github.io/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>restar</title>
    <link href="https://linpeichuang.github.io/2019/09/26/restar/"/>
    <id>https://linpeichuang.github.io/2019/09/26/restar/</id>
    <published>2019-09-26T09:03:11.000Z</published>
    <updated>2019-09-26T09:04:21.110Z</updated>
    
    <content type="html"><![CDATA[<hr><p>算术表达式有前缀表示法、中缀表示法和后缀表示法等形式。日常使用的算术表达式是采用中缀表示法，即二元运算符位于两个运算数中间。请设计程序将中缀表达式转换为后缀表达式。</p><p>输入格式:<br>输入在一行中给出不含空格的中缀表达式，可包含+、-、*、\以及左右括号()，表达式不超过20个字符。</p><p>输出格式:<br>在一行中输出转换后的后缀表达式，要求不同对象（运算数、运算符号）之间以空格分隔，但结尾不得有多余空格。</p><p>输入样例:<br>2+3*(7-4)+8/4<br>输出样例:</p><h2 id="2-3-7-4-8-4"><a href="#2-3-7-4-8-4" class="headerlink" title="2 3 7 4 - * + 8 4 / +"></a>2 3 7 4 - * + 8 4 / +</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt;mapping;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; <span class="built_in">list</span>;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="keyword">bool</span> isfirst = <span class="literal">true</span>;</span><br><span class="line">mapping[<span class="string">'-'</span>] = <span class="number">1</span>, mapping[<span class="string">'+'</span>] = <span class="number">1</span>;</span><br><span class="line">mapping[<span class="string">'*'</span>] = <span class="number">2</span>, mapping[<span class="string">'/'</span>] = <span class="number">2</span>;</span><br><span class="line">mapping[<span class="string">'('</span>] = <span class="number">3</span>, mapping[<span class="string">')'</span>] = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.size(); i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (((i == <span class="number">0</span> || str[i - <span class="number">1</span>] == <span class="string">'('</span>) &amp;&amp; (str[i] == <span class="string">'+'</span> || str[i] == <span class="string">'-'</span>)) || (str[i] &gt;= <span class="string">'0'</span> &amp;&amp; str[i] &lt;= <span class="string">'9'</span>) || (str[i] == <span class="string">'.'</span>)) &#123;</span><br><span class="line"><span class="keyword">if</span> (!isfirst) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (str[i] != <span class="string">'+'</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; str[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (str[i + <span class="number">1</span>] == <span class="string">'.'</span> || (str[i + <span class="number">1</span>] &gt;= <span class="string">'0'</span> &amp;&amp; str[i + <span class="number">1</span>] &lt;= <span class="string">'9'</span>)) &#123;</span><br><span class="line">i++;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; str[i];</span><br><span class="line">&#125;</span><br><span class="line">isfirst = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (str[i] == <span class="string">')'</span>) &#123;</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">list</span>.empty() &amp;&amp; <span class="built_in">list</span>.top() != <span class="string">'('</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; <span class="built_in">list</span>.top();</span><br><span class="line"><span class="built_in">list</span>.pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">list</span>.pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">list</span>.empty() || mapping[str[i]] &gt; mapping[<span class="built_in">list</span>.top()]) &#123;</span><br><span class="line"><span class="built_in">list</span>.push(str[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">list</span>.empty() &amp;&amp; <span class="built_in">list</span>.top() != <span class="string">'('</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; <span class="built_in">list</span>.top();</span><br><span class="line"><span class="built_in">list</span>.pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">list</span>.push(str[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">list</span>.empty()) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; <span class="built_in">list</span>.top();</span><br><span class="line"><span class="built_in">list</span>.pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;算术表达式有前缀表示法、中缀表示法和后缀表示法等形式。日常使用的算术表达式是采用中缀表示法，即二元运算符位于两个运算数中间。请设计程序将中缀表达式转换为后缀表达式。&lt;/p&gt;
&lt;p&gt;输入格式:&lt;br&gt;输入在一行中给出不含空格的中缀表达式，可包含+、-、*、\以及左右
      
    
    </summary>
    
      <category term="未分类" scheme="https://linpeichuang.github.io/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>xiaobai</title>
    <link href="https://linpeichuang.github.io/2019/07/06/xiaobai/"/>
    <id>https://linpeichuang.github.io/2019/07/06/xiaobai/</id>
    <published>2019-07-06T08:39:26.000Z</published>
    <updated>2019-07-06T08:42:10.189Z</updated>
    
    <content type="html"><![CDATA[<h1 id="终于把主题搞回来了"><a href="#终于把主题搞回来了" class="headerlink" title="终于把主题搞回来了"></a>终于把主题搞回来了</h1><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>];</span><br><span class="line">ofstream outfile;</span><br><span class="line">outfile.open(<span class="string">"fi.dat"</span>, ios::out);</span><br><span class="line"><span class="keyword">if</span> (!outfile)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cerr</span> &lt;&lt; <span class="string">"open file error"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"enter 10 integer numbers"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">outfile &lt;&lt; a[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line">outfile.close();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;终于把主题搞回来了&quot;&gt;&lt;a href=&quot;#终于把主题搞回来了&quot; class=&quot;headerlink&quot; title=&quot;终于把主题搞回来了&quot;&gt;&lt;/a&gt;终于把主题搞回来了&lt;/h1&gt;&lt;hr&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr
      
    
    </summary>
    
      <category term="未分类" scheme="https://linpeichuang.github.io/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>一个Ubuntu的心得</title>
    <link href="https://linpeichuang.github.io/2019/03/24/%E4%B8%80%E4%B8%AAUbuntu%E7%9A%84%E5%BF%83%E5%BE%97/"/>
    <id>https://linpeichuang.github.io/2019/03/24/一个Ubuntu的心得/</id>
    <published>2019-03-24T15:38:11.000Z</published>
    <updated>2019-03-24T16:00:51.372Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ubuntu学习笔记（1）"><a href="#ubuntu学习笔记（1）" class="headerlink" title="ubuntu学习笔记（1）"></a>ubuntu学习笔记（1）</h2><h1 id="开机无法进入图形界面"><a href="#开机无法进入图形界面" class="headerlink" title="开机无法进入图形界面"></a>开机无法进入图形界面</h1><ul><li>经过<blockquote><p>在ubuntu中从download文件夹中复制一个刚下载的主题文件到usr/share/themes，<br>然後重启就不能进入图形界面了，直接进入tty1界面<br>折腾了半个小时，最后看了CSDN上一个blog重装ubuntu Gnome环境，<br>输入命令<font color="#D2691E" face="黑体">sudo apt-get remove ubuntu-desktop #卸载ubuntu-desktop</font><br>再输入命令 <font color="#D2691E" face="黑体">sudo apt-get install ubuntu-desktop #安装ubuntu-desktop</font><br>最后输入 <font color="#D2691E" face="黑体">reboot</font> #重启就解决了</p></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ubuntu学习笔记（1）&quot;&gt;&lt;a href=&quot;#ubuntu学习笔记（1）&quot; class=&quot;headerlink&quot; title=&quot;ubuntu学习笔记（1）&quot;&gt;&lt;/a&gt;ubuntu学习笔记（1）&lt;/h2&gt;&lt;h1 id=&quot;开机无法进入图形界面&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="ubuntu学习笔记" scheme="https://linpeichuang.github.io/categories/ubuntu%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
</feed>
